@using Cascade.Head.Settings
@model Cascade.Head.Settings.HeadTypePartSettings

@{
    Style.Require("Head");          // includes bootstrap css only
    Script.Require("Bootstrap");
    Script.Require("Head");

    var fieldNameBase = Html.FieldNameFor(m => Model.Elements);

}
<script>
    // yeah it's a global
    var fieldNameBase = '@fieldNameBase';
</script>


<!--This wrapper is a css 'namespace'-->
<div id="metaElementsNs">

    <!-- modal dialog -->
    <div class="modal " id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h3 class="modal-title">Head Element Details</h3>
                </div>
                <div class="modal-body">
                    <table class="table head">
                        <tr>
                            <td>Type</td>
                            <td>
                                <select id="heType" name="type" disabled>
                                    <option value="title">Title</option>
                                    <option value="name">Name</option>
                                    <option value="http-equiv">Http-equiv</option>
                                    <option value="charset">Charset</option>
                                    <option value="link">Link</option>
                                </select>
                                <input type="hidden" name="id" disabled value="" />
                                <span class="hint">@T("Choose the type of meta element to be added.")</span>
                            </td>
                        </tr>
                        @* default type is Title so hide the Name *@
                        <tr class="hidden">
                            <td id="NameOrHttpEquivLabel" style="vertical-align:top;"></td>
                            <td>
                                <div class="select-editable">
                                    <select id="nameDropdown" onchange="document.getElementById('heName').value = this.value">
                                        <option value="keywords">Keywords</option>
                                        <option value="description">Description</option>
                                        <option value="author">Author</option>
                                        <option value="shortcut icon">Favicon (shortcut icon)</option>
                                        <option value="publisher">Publisher</option>
                                        <option value="generator">Generator</option>
                                        <option value="viewport">Viewport</option>
                                        <option value="referer">Referer</option>
                                        <option value="robots">Robots</option>
                                        <option value="googlebot">Googlebot (Google robot only)</option>
                                        <option value="slurp">Slurp (Yahoo robot only)</option>
                                    </select>
                                    <select id="httpEquivDropdown" onchange="document.getElementById('heName').value = this.value" class="hidden">
                                        <option value="refresh">Refresh (interval and/or url)</option>
                                        <option value="default-style">Default Style Sheet</option>
                                    </select>
                                    <select id="linkDropdown" onchange="document.getElementById('heName').value = this.value" class="hidden">
                                        <option value="icon">Icon (favicon)</option>
                                        <option value="apple-touch-icon">Apple Touch Icon</option>
                                        <option value="apple-touch-icon-precomposed">Apple Touch Icon Precomposed (no reflective shine added)</option>
                                    </select>
                                    <input id="heName" type="text" name="name" value="" />
                                </div>
                                <span class="hint">@T("Type a value or select one from the list.")</span>
                            </td>
                        </tr>
                        <tr>
                            <td><label id="labelContent">Content</label></td>
                            <td><input id="elementContent" type="text" name="content" disabled value="" /></td>
                        </tr>
                    </table>
                </div>
                <div class="modal-footer">
                    <button id="saveElement" class="btn btn-primary" type="button">OK</button>
                    <button class="btn btn-warning" type="button" data-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>



    <fieldset>
        <table id="elementTable" class="items">
            <caption>
                The html head tags shown here will be included in all pages in which this content type appears.
                <div class="manage"><a id="createHeadElement" class="button primaryAction">Add a new head element</a></div>
            </caption>
            <thead>
                <tr>
                    @*<th class="hidden" scope="col">@T("Id")</th>*@
                    <th scope="col">@T("Type")</th>
                    <th scope="col">@T("Name")</th>
                    <th scope="col">@T("Content")</th>
                    <th scope="col">@T("Actions")</th>
                </tr>
            </thead>
            <tbody>
                @for (int index = 0; index < Model.Elements.Count; ++index)
                {
                    var element = Model.Elements[index];
                    <tr>

                        <td class="hidden">
                            <!--entry.Deleted-->
                            <input type="hidden" name="@(fieldNameBase)[@index].Deleted" value="false" />
                        </td>

                        <td>
                            <!--entry.Type-->
                            @element.Type
                            @{
                    var f1 = fieldNameBase + "[" + index + "].Type";
                            }
                            <input type="hidden" name="@(fieldNameBase)[@(index)].Type" value="@element.Type" />
                        </td>
                        <td>
                            <!--entry.Name-->
                            @element.Name
                            <input type="hidden" name="@(fieldNameBase)[@(index)].Name" value="@element.Name" />
                        </td>
                        <td>
                            <!--entry.Content-->
                            @element.Content
                            <input type="hidden" name="@(fieldNameBase)[@(index)].Content" value="@element.Content" />
                        </td>
                        <!--actions-->
                        <td class="action">
                            <a href="#" class="elementEdit">Edit</a> | <a href="#" class="elementDelete">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </fieldset>
</div>
